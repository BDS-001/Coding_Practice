- stack handles code in a linear path

- javascript stack is only capable of doing one thing at a time

- browsers have web api that can allow for asynchronous code

- when a funciton is called that uses a webapi it sends the function to the web api
    - webapi processes data then moves it to the tasks
        - event loops moves tasks to the stack only when the stack is currently empty so that a string of code being executed does not get corrupted



- callback hell is more than just nesting issues and async issues
- if you take seperated code and combine into one function you can still become callback hell
    - code that cannot account for deviations and are hardcoded to follow a single path will be hard to maintain and update even if it account for difference scenarios